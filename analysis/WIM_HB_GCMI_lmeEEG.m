%%
clear
close all

%% paths
run(['..' filesep 'localdef_WIM_HB'])
addpath(genpath(path_eeglab))
addpath(genpath(path_gcmi))
addpath(genpath(path_lmeEEG))
addpath(genpath(path_TFCE))


%% params

% timelags (s) 
hbLags = (50:50:800)/1000; % heart to brain 
bhLags = (100:100:1600)/1000; % brain to heart (slower response at SA node)

eplen = 10; % probe epoch analysis window length (s)
wlen = eplen + ceil(max(bhLags)); % window length taking into account max lag duration (s)

% frequency bands (Hz)
cfrex = logspace(.1, 1.05, 8)';
fbands = [cfrex*.85, cfrex*1.15];

% gcmi bias correction -- not needed if applying permutation tests
bc = false;


%% batch process
subjs = dlmread(['..' filesep 'subjs.txt']);

MI = cell(length(subjs),1);
prb = cell(length(subjs),1);
for ix = 1 :length(subjs)
    
    snum = subjs(ix);
    sname = ['MWI' num2str(snum)];
    fprintf(['Loading ' sname '...\n'])

    % load ibi data (generated by WIM_HB_IBI_RT_interp)
    load(['..' filesep 'ibi' filesep ['ibi_trl_' sname] ]);

    % load ICA'd data
    mi = pop_loadset( 'filename', [sname, '_ica_rej.set'], 'filepath', fullfile(eeg_preproc, 'ica'));
    chanlocs = mi.chanlocs;

    % load behav data 
    behav_name = dir([path_behav filesep '*s' num2str(snum) '*.mat']);
    load([path_behav filesep behav_name.name]);
    probe_res(probe_res(:,32)==4,32)=3;
    prb{ix} = [repmat(snum, 60,1), [1:60]', probe_res(:,[32,38])];

    for nFrq = 1 : size(fbands, 1)
     
        % filter freq band 
        EEGband = pop_eegfiltnew(mi, fbands(nFrq, 1), []);
        EEGband = pop_eegfiltnew(EEGband, [], fbands(nFrq, 2));

        % downsample
        EEGband = pop_resample( EEGband, dfs );

        % epoch
        EEGband = pop_epoch( EEGband, { mi.event(contains({EEGband.event.type}, 'P')).type }, [-wlen, 0], 'epochinfo', 'yes');

        for nEp = 1:EEGband.trials

            % eeg
            hilb_eeg = hilbert( squeeze(EEGband.data(:,:,nEp)') );  
            eeg_amp = abs( hilb_eeg );
            eeg_phi = permute( cat( 3, real(hilb_eeg)./abs(hilb_eeg), imag(hilb_eeg)./abs(hilb_eeg) ), [1,3,2] );
            ceeg_phi = copnorm(eeg_phi);
 
            % ibi  
            ibi_t = tmz{nEp}(2):1/dfs:tmz{nEp}(end);
            win = [(prbs{nEp}/fs)-wlen, prbs{nEp}/fs];
            ibi_tx = ibi_t>=win(1)&ibi_t<win(2);
            ibi_seg = detrend(ibs{4,nEp}(ibi_tx));
            if numel(ibi_seg) < wlen*dfs
                if ibi_t(end)<win(2)
                    nmissing = wlen*dfs-numel(ibi_seg);
                    warning('Window extends beyond final timepoint -- padding epoch %g by %g points', nEp, nmissing)
                    ibi_seg = [ibi_seg, ibi_seg(end-1:-1:end-nmissing)];
                else
                    warning('Problem with ibi segment -- check')
                end
            end

            hilb_ibi = hilbert( ibi_seg' );
            ibi_amp = abs( hilb_ibi ); 
            ibi_phi = permute( cat( 3, real(hilb_ibi)./abs(hilb_ibi), imag(hilb_ibi)./abs(hilb_ibi) ), [1,3,2] );
            cibi_phi = copnorm(ibi_phi);

            % heart -> brain (lead ibi)
            for nLag = 1:length(hbLags)
                d = round( hbLags(nLag)*dfs );
                dibi = cibi_phi((wlen-eplen)*dfs-d+1:(end-d),:);
                for nCh = 1:mi.nbchan
                    MI{ix}(1,nCh,nFrq,nLag,nEp) = mi_gg(ceeg_phi(((wlen-eplen)*dfs)+1:end,:,nCh), dibi, bc, true);
                end
            end
            
            % brain -> heart (lead eeg)
            for nLag = 1:length(bhLags)
                d = round( bhLags(nLag)*dfs );
                dibi = cibi_phi(((wlen-eplen)*dfs)+1:end,:);
                for nCh = 1:mi.nbchan
                    MI{ix}(2,nCh,nFrq,nLag,nEp) = mi_gg(dibi, ceeg_phi((wlen-eplen)*dfs-d+1:(end-d),:,nCh), bc, true);
                end
            end
            

        end

    end


end

P = cat(1, prb{:});

save('WIM_HB_GCMI_lmeEEG.mat', 'MI', 'eplen', 'dfs', 'hbLags', 'bhLags', 'fbands', 'bc', 'chanlocs', 'P')

%% 

SID = nominal( P(:,1) ); 
PID = nominal( P(:,2) ); 
MS = categorical(P(:,3), 1:3, {'ON', 'MW', 'MB'});
tab = table(SID,PID,MS);

u = unique(tab.SID(tab.MS=="MW")); % exclude subjects that don't report MW
eps = ismember(tab.SID, u);

fb = cat(5, MI{:});

sid = SID(eps);
pid = PID(eps);
ms = MS(eps);

Results = struct([]);


for dx = 1:size(fb,1) % directionality (1=hb, 2=bh)

    T = squeeze(fb(dx,:,:,:,eps));

    %% STEP 1
    % Conduct mixed models on each channel/timepoint combination.
     
    mform = 'mi~ms+(1|sid)';

    mMI = nan(size(T));
    for ch = 1:size(T,1)
        fprintf('Fitting mixed models for %s [%g/%g]...\n', chanlocs(ch).labels, ch, size(T,1))
        for fx = 1:size(T,2)
            parfor tpoint = 1:size(T,3)
                mi = squeeze(T(ch,fx,tpoint,:));
                mi = table(mi,sid,pid,ms);
        
                m = fitlme(mi, mform);
                mMI(ch,fx,tpoint,:) = fitted(m,'Conditional',0)+residuals(m); % Extract marginal EEG
                
            end
        end
    end
    
    % Extract design matrix X
    mi = squeeze(T(1,1,1,:));
    mi = table(mi,sid,pid,ms);
    
    m = fitlme(mi, mform);
    X = designMatrix(m);


    %% STEP 2 
    % Perform mass univariate linear regressions on “marginal” EEG data.
    [t_obs, betas, se] = deal( nan(size(mMI,1),size(mMI,2),size(mMI,3),size(X,2)) );
    Xx = X;
    for ch = 1:size(mMI,1)
        fprintf('Obtaining statistics for %s [%g/%g]...\n', chanlocs(ch).labels, ch, size(T,1))
        for fx = 1:size(mMI,2)
            parfor tpoint = 1:size(mMI,3)
                mi = squeeze(mMI(ch,fx,tpoint,:));
                [t_obs(ch,fx,tpoint,:), betas(ch,fx,tpoint,:), se(ch,fx,tpoint,:)]=lmeEEG_regress(mi,Xx);
            end
        end
    end
    
    Results(dx).t_obs = t_obs;
    Results(dx).betas = betas;
    Results(dx).se = se;

    %% STEP 3
    % Perform permutation testing ...
    nperms=2000; % number of permutations
    [rperms] = lmeEEG_permutations(sid,nperms); % nperms within-subjects permutations of X (for stimuli-within-condition designs)
    
    t_perms = nan(nperms,size(mMI,1),size(mMI,2),size(mMI,3),size(X,2)); % Initialize t-map
    for p = 1:nperms
        fprintf('Permutation #%g ...\n', p)
        XX = X(rperms(:,p),:);
        for ch = 1:size(mMI,1)
            for fx = 1:size(mMI,2)
                parfor tpoint = 1:size(mMI,3)
                    mi = squeeze(mMI(ch,fx,tpoint,:));
                    [t_perms(p,ch,fx,tpoint,:)]=lmeEEG_regress(mi,XX);
                end
            end
        end
    end
    
    Results(dx).t_perms = t_perms;

    %% ... and apply TFCE (over EEG timewindow of interest)
    % This part requires ept_TFCE toolbox (https://github.com/Mensen/ept_TFCE-matlab)
    for i = 2:size(X,2) % i from 2 since permutation testing of the intercept is not possible
        if ndims(t_obs) == 3 % channels x timepoints x fixed effects
            Results(dx).(matlab.lang.makeValidName(m.CoefficientNames{i})) = lmeEEG_TFCE(squeeze(t_obs(contains({chanlocs.type}, 'EEG'),:,i)),squeeze(t_perms(:,contains({chanlocs.type}, 'EEG'),:,i)),chanlocs(contains({chanlocs.type}, 'EEG')),[0.66 2]);
        elseif ndims(t_obs) == 4 % channels x frequencies x timepoints x fixed effects
            Results(dx).(matlab.lang.makeValidName(m.CoefficientNames{i})) = lmeEEG_TFCE(squeeze(t_obs(contains({chanlocs.type}, 'EEG'),:,:,i)),squeeze(t_perms(:,contains({chanlocs.type}, 'EEG'),:,:,i)),chanlocs(contains({chanlocs.type}, 'EEG')),[0.66 2]);
        end
    end
    save('WIM_HB_GCMI_lmeEEG.mat', 'Results', '-append')


end


%% PLOT RESULTS

% Raster plot identifying significant chan x freq x time contrasts from ON
direc = {'h2b', 'b2h'};
states = {'MW', 'MB'};
chan_labs = struct2table(chanlocs).labels;
xtims = {hbLags, bhLags};
for dx = 1:numel(direc)
    mw = Results(dx).ms_MW.Mask;
    mb = Results(dx).ms_MB.Mask;
    mT = cat(4, mw, mb);
    for mx = 1:numel(states)
        figure
        sgtitle([ states{mx} ': ', direc{dx}]);
        for fx = 1:size(mT,2)
            subplot(2,4,fx)
            imagesc(squeeze(mT(:,fx,:,mx)))
            set(gca,'ytick',1:numel(chanlocs),'FontSize',8,'FontName','Arial');
            set(gca,'TickLength',[0 0]);
            set(gca,'XTick',1:numel(xtims{dx}),'XTickLabel', xtims{dx},'FontSize',8,'FontName','Arial');
            yticklabels(chan_labs);
            xlabel("Time (s)","FontWeight","bold","FontSize",10, "FontName","Arial");
            set(gca,'color','none')
            title(sprintf('[%g,%g] Hz', fbands(fx,1), fbands(fx,2)))
        end
    end 
end

