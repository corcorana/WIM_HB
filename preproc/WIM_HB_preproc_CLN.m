%%
clear all
close all

%% paths
run(['..' filesep 'localdef_WIM_HB'])
addpath(genpath(path_eeglab))

proc_cln = fullfile(eeg_preproc, 'cln');
if ~exist(proc_cln, 'dir')
    mkdir(proc_cln)
end

%% batch process

prep = 1;                  % 1 = PREP pipeline version of CleanLine; else use CleanLine plugin
frex = [50, 100];          % frequencies to clean

subjs = dlmread(['..' filesep 'subjs.txt']);

for ix = 1:length(subjs)
    snum = subjs(ix);
    sname = ['MWI' num2str(snum)];
    fprintf(['Loading ' sname '...\n'])

    % load minimally preprocessed EEG
    EEG = pop_loadset( 'filename', [sname, '_min.set'], 'filepath', fullfile(eeg_preproc, 'min'));

    % high-pass filter
    EEG = pop_eegfiltnew(EEG, 1.0, []);
    
    % downsample 
    EEG = pop_resample(EEG, 250);
    
    % cleanline
    if prep == 1    % run cleanLineNoise
        signal      = struct('data', EEG.data, 'srate', EEG.srate);
        lineNoiseIn = struct('lineNoiseMethod', 'clean', ...
                             'lineNoiseChannels', 1:EEG.nbchan,...
                             'Fs', EEG.srate, ...
                             'lineFrequencies', frex,...
                             'p', 0.01, ...
                             'fScanBandWidth', 2, ...
                             'taperBandWidth', 2, ...
                             'taperWindowSize', 4, ...
                             'taperWindowStep', 1, ...
                             'tau', 100, ...
                             'pad', 2, ...
                             'fPassBand', [0 EEG.srate/2], ...
                             'maximumIterations', 10);
        [clnOutput, EEG.etc.cleanLine] = cleanLineNoise(signal, lineNoiseIn);
        EEG.data = clnOutput.data;
        
    else    % run regular CleanLine
        EEG = pop_cleanline(EEG, 'bandwidth', 2, ...
                            'chanlist', 1:EEG.nbchan, ...
                            'computepower', 1, ...
                            'linefreqs', frex, ...
                            'normSpectrum', 0,...
                            'p', 0.01, ...
                            'pad', 2, ...
                            'plotfigures', 0, ...
                            'scanforlines', 1, ...
                            'sigtype', 'Channels', ...
                            'tau', 100, ...
                            'verb', 1, ...
                            'winsize', 4, ...
                            'winstep', 1);
    end
      
    % save cleanLined data
    EEG = pop_saveset( EEG, 'filename', [sname, '_cln.set'], 'filepath', proc_cln);

end
